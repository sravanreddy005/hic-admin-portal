{"version":3,"file":"common.e00f848543b8e670.js","mappings":"oIAKO,IAAMA,EAAb,MAAM,QAEJC,YAAoBC,qBAEpBC,WACEC,KAAKF,WAAWG,cAAcC,sDALrBN,GAAkBO,uCAAlBP,EAAkBQ,kCAAlBR,GAAb,mBCHM,WAA6BS,EAAqBC,GACpD,OAAQC,IACJ,MAAMC,EAAUD,EAASE,IAAIJ,GACvBK,EAAkBH,EAASE,IAAIH,GACrC,IAAII,EAAgBC,QAAWD,EAAgBC,OAAOC,mBAGtD,OACWF,EAAgBG,UADvBL,EAAQM,QAAUJ,EAAgBI,MACD,CAAEF,oBAAoB,GAEtB,OAKvC,WAA6BP,EAAqBC,GACpD,OAAQC,IACJ,MAAMC,EAAUD,EAASE,IAAIJ,GACvBK,EAAkBH,EAASE,IAAIH,GACrC,IAAII,EAAgBC,QAAWD,EAAgBC,OAAOI,mBAGtD,OACWL,EAAgBG,UADvBL,EAAQM,QAAUJ,EAAgBI,MACD,CAAEC,oBAAoB,GAEtB,OAKvC,WAA2BV,EAAqBC,EAA6BU,EAAc,YAC7F,OAAQT,IACJ,MAAMC,EAAUD,EAASE,IAAIJ,GACvBK,EAAkBH,EAASE,IAAIH,GACrC,GAAII,EAAgBC,SAAWD,EAAgBC,OAAOM,sBAClD,OAEJ,IAAIC,EAAiBC,WAAWX,EAAQM,OACpCM,EAAiBD,WAAWT,EAAgBI,OAEhD,OACWJ,EAAgBG,UADvBK,GAAUE,GAAmB,aAATJ,GAEdE,GAAUE,GAAmB,gBAATJ,EADO,CAAEK,kBAAkB,GAIpB,+OC9CtC,MAAMC,EAAa,kBACbC,EAAe,yDACfC,EAAY,2JACZC,EAAc,iDACdC,EAAY,oCACZC,EAAY,8BACZC,EAAU,WACVC,EAAwB,cACxBC,EAAmB,sBACnBC,EAAc,uBAEdC,EAAU,oHACVC,EAAc,gCAGdC,EAAW,+DACXC,EAAW,wCACXC,EAAY,uBACZC,EAAa,gFACbC,EAAc,4BACdC,EAAW,4DACXC,EAAe,6ECRrB,IAAMC,EAAb,MAAM,QAUJ5C,YACU6C,wBAPV1C,qBAAiB,EACjBA,cAAW,IACXA,cAA6B2C,gBAC7B3C,wBAAoB,EACpBA,YAA4B,UAM5BA,WAA6B,CAC3B,UACA,UACA,OACA,UACA,UAIFA,eAAY,CAAC4C,EAAY,GAAI5B,EAAyB6B,EAAeC,EAAe,MAYlF9C,KAAK0C,cAAcK,KAAKD,EAAMD,EAXf,CACbG,OAAQhC,EACRiC,eAAgBjD,KAAKiD,eACrBC,SAAUlD,KAAKkD,SACfC,SAAUnD,KAAKmD,SACfC,kBAAmBpD,KAAKoD,kBACxBC,SAAS,EACTT,KAAMA,EACNU,KAAM,uDAhCCb,GAActC,yCAAdsC,EAAcc,QAAdd,EAAc,qBAFb,SAEDA,GAAb,4FCbAtC,iBACIA,iBACJA,SCMO,IAAMqD,EAAb,MAAM,QAKJ3D,YAAoB4D,wBAFpBzD,eAA8BA,KAAKyD,cAAcC,UAIjD3D,0DAPWyD,GAAerD,qCAAfqD,EAAepD,yPDR5BD,8CAAMA,mFCQOqD,GAAb,gFCkBS,IAAMG,EAAb,MAAM,sDAAOA,6DAJA,CACPlB,KACHmB,SAhBQ,CACLC,KACAC,SAgBOH,GAAb","names":["AutoFocusDirective","constructor","elementRef","ngOnInit","this","nativeElement","focus","i0","selectors","controlName","matchingControlName","controls","control","get","matchingControl","errors","confirmNewIsNotOld","setErrors","value","confirmedValidator","type","compareFloatValidator","value1","parseFloat","value2","compareValidator","mobileRegx","passwordRegx","emailRegx","pincodeRegx","alnumRegx","alphaRegx","numRegx","alphaWithoutSpaceRegx","alnumSpecialRegx","addressRegx","urlRegx","nonHTMLRegx","dateRegx","fileRegx","floatRegx","adhaarRegx","panCardRegx","gstnRegx","passportRegx","ToasterService","toastrService","NbGlobalPhysicalPosition","icon","title","body","show","status","destroyByClick","duration","position","preventDuplicates","hasIcon","pack","factory","LoaderComponent","loaderService","isLoading","SharedModule","imports","CommonModule","HttpClientModule"],"sourceRoot":"webpack:///","sources":["./src/app/helpers/autofocus.directive.ts","./src/app/helpers/confirmed.validator.ts","./src/app/helpers/regExp.ts","./src/app/services/toaster/toaster.service.ts","./src/app/shared/loader/loader.component.html","./src/app/shared/loader/loader.component.ts","./src/app/shared/shared.module.ts"],"sourcesContent":["import { Directive, OnInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autoFocus]'\r\n})\r\nexport class AutoFocusDirective implements OnInit {\r\n\r\n  constructor(private elementRef: ElementRef) { };\r\n\r\n  ngOnInit(): void {\r\n    this.elementRef.nativeElement.focus();\r\n  }\r\n\r\n}","import { AbstractControl, FormGroup, ValidationErrors } from '@angular/forms';\n\nexport function ConfirmNewIsNotOld(controlName: string, matchingControlName: string){\n    return (controls: AbstractControl) => {\n        const control = controls.get(controlName);\n        const matchingControl = controls.get(matchingControlName);\n        if (matchingControl.errors && !matchingControl.errors.confirmNewIsNotOld) {\n            return;\n        }\n        if (control.value === matchingControl.value) {\n            return matchingControl.setErrors({ confirmNewIsNotOld: true });\n        } else {\n            return matchingControl.setErrors(null);\n        }\n    }\n}\n    \nexport function ConfirmedValidator(controlName: string, matchingControlName: string){\n    return (controls: AbstractControl) => {\n        const control = controls.get(controlName);\n        const matchingControl = controls.get(matchingControlName);\n        if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\n            return;\n        }\n        if (control.value !== matchingControl.value) {\n            return matchingControl.setErrors({ confirmedValidator: true });\n        } else {\n            return matchingControl.setErrors(null);\n        }\n    }\n}\n\nexport function CompareValidator(controlName: string, matchingControlName: string, type:string = 'lessthan'){\n    return (controls: AbstractControl) => {\n        const control = controls.get(controlName);\n        const matchingControl = controls.get(matchingControlName);\n        if (matchingControl.errors && !matchingControl.errors.compareFloatValidator) {\n            return;\n        }\n        let value1: number = parseFloat(control.value);\n        let value2: number = parseFloat(matchingControl.value);\n        \n        if (value1 >= value2 && type === 'lessthan') {\n            return matchingControl.setErrors({ compareValidator: true });\n        }else if (value1 <= value2 && type === 'greaterthan') {\n            return matchingControl.setErrors({ compareValidator: true });\n        } else {\n            return matchingControl.setErrors(null);\n        }\n    }\n}\n\n","\nexport const mobileRegx = /^[6-9][0-9]{9}$/;\nexport const passwordRegx = /^(?=.*\\d)(?=.*[!@#$%^&*_])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\nexport const emailRegx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,13}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nexport const pincodeRegx = /([1-9]{1}[0-9]{5}|[1-9]{1}[0-9]{3}\\\\s[0-9]{3})/;\nexport const alnumRegx = /^[a-zA-z0-9]+([\\s][a-zA-Z0-9]+)*$/;\nexport const alphaRegx = /^[a-zA-z]+([\\s][a-zA-Z]+)*$/;\nexport const numRegx = /^[0-9]+$/;\nexport const alphaWithoutSpaceRegx = /^[a-zA-Z]+$/;\nexport const alnumSpecialRegx = /^[A-Za-z0-9? ,_-]+$/;\nexport const addressRegx = /^[A-Za-z0-9/ ,_.-]+$/;\nexport const imageRegx = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.png|.jpg|.jpeg|.gif|)+$/;\nexport const urlRegx = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}(\\.[a-z]{2,6}|:[0-9]{3,4})\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)/;\nexport const nonHTMLRegx = /^[A-Za-z0-9/ ,)(@#!*+=^._-]+$/;\nexport const currencyCodeRegx = /^([a-zA-Z]){3}$/;\nexport const dayMonthRegx = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])$/;\nexport const dateRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\nexport const fileRegx = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.csv|.xls)+$/;\nexport const floatRegx = /^(?!0\\d)\\d*(\\.\\d+)?$/;\nexport const adhaarRegx = /(^[2-9]{1}[0-9]{3}\\s[0-9]{4}\\s[0-9]{4}$)|(^[2-9]{1}[0-9]{3}[0-9]{4}[0-9]{4}$)/;\nexport const panCardRegx = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;\nexport const gstnRegx = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/;\nexport const passportRegx = /^[A-Z]{1}[0-9]{7}$/;","import { Injectable } from '@angular/core';\nimport {\n  NbComponentStatus,\n  NbGlobalLogicalPosition,\n  NbGlobalPhysicalPosition,\n  NbGlobalPosition,\n  NbToastrService,\n  NbToastrConfig,\n  NbIconConfig\n} from '@nebular/theme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToasterService {\n\n  config: NbToastrConfig;\n\n  destroyByClick = true;\n  duration = 5000;\n  position: NbGlobalPosition = NbGlobalPhysicalPosition.TOP_RIGHT;\n  preventDuplicates = false;\n  status: NbComponentStatus = 'success';\n\n  constructor(\n    private toastrService: NbToastrService\n  ) { }\n\n  types: NbComponentStatus[] = [\n    'primary',\n    'success',\n    'info',\n    'warning',\n    'danger',\n  ];\n\n  \n  showToast = (icon: any = '', type: NbComponentStatus, title: string, body: string = '') => {\n    const config = {\n      status: type,\n      destroyByClick: this.destroyByClick,\n      duration: this.duration,\n      position: this.position,\n      preventDuplicates: this.preventDuplicates,\n      hasIcon: true, \n      icon: icon,\n      pack: 'eva'\n    };\n\n    this.toastrService.show(body, title, config)\n  }\n  \n}\n","<!-- Loader -->\n<div *ngIf=\"isLoading | async\" id=\"global-loader\" class=\"light-loader\">\n    <img src=\"../../../assets/images/loader.svg\" class=\"loader-img\" alt=\"Loader\">\n</div>\n<!-- /Loader -->","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LoaderService } from '../../services/loader/loader.service';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css']\n})\nexport class LoaderComponent implements OnInit {\n\n  loading!: boolean\n  isLoading: Subject<boolean> = this.loaderService.isLoading;\n\n  constructor(private loaderService: LoaderService) { }\n\n  ngOnInit(): void {\n    \n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AutoFocusDirective } from '../helpers/autofocus.directive';\r\nimport { NumberDirective } from '../helpers/numbers-only.directive';\r\nimport { ToasterService } from '../services/toaster/toaster.service';\r\nimport { LoaderComponent } from './loader/loader.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        HttpClientModule\r\n    ],\r\n    exports: [\r\n        AutoFocusDirective,\r\n        NumberDirective,\r\n        LoaderComponent,\r\n    ],\r\n    declarations: [\r\n        AutoFocusDirective,\r\n        NumberDirective,\r\n        LoaderComponent,\r\n    ],\r\n    providers: [\r\n        ToasterService,\r\n    ]\r\n  })\r\n  export class SharedModule {}"]}