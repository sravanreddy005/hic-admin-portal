{"version":3,"file":"819.c0289c7774f9f68c.js","mappings":"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","names":["AuthComponent","selectors","i0","LoginComponent","constructor","formBuilder","toasterService","authenticateService","router","this","isLoggedIn","isEmpty","currentUserValue","navigate","ngOnInit","loginForm","group","email","Validators","password","form","controls","onSubmit","submitted","invalid","login","value","subscribe","next","data","responseCode","reset","showToast","e","message","error","err","errMessage","r","_a","complete","ctx","ForgotPasswordComponent","__awaiter","forgotForm","forgotPassword","successAlert","s","errorAlert","a","ctx_r9","oxw","routes","path","component","children","token","tokenResp","validateResetToken","linkExpired","tokenExpiry","success","resetForm","resetPassword","errorCode","urlParams","URLSearchParams","window","location","search","get","tokenDetails","decoded","jwt_decode","console","log","currentTime","Date","getTime","expiry","checkResetTokenExpiry","passwordRegx","confirm_password","validator","ConfirmedValidator","ResetPasswordComponent","goToLogin","NotFoundComponent","AuthRoutingModule","RouterModule","AuthModule","SharedModule","CommonModule","ReactiveFormsModule","FormsModule","NbLayoutModule","NbCardModule","NbInputModule","NbAlertModule","ThemeModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/auth.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/reset-password/reset-password.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/not-found/not-found.component.ts","./src/app/auth/not-found/not-found.component.html","./src/app/auth/auth.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngx-pages',\n  styleUrls: ['auth.component.scss'],\n  template: `<nb-layout windowMode>\n  <nb-layout-column>\n      <app-loader></app-loader>\n      <router-outlet></router-outlet>\n  </nb-layout-column>\n</nb-layout>`,\n})\nexport class AuthComponent {\n\n}\n","<section>\n  <div class=\"container\">\n    <div class=\"row d-flex justify-content-center align-items-center h-100\">\n      <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n          <div class=\"card-body p-5 text-center\">\n            <h3 class=\"mb-5\">Sign in</h3>\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n              <!-- Email input -->\n              <div class=\"form-outline mb-4\">\n                <input type=\"email\" placeholder=\"Email address\" formControlName=\"email\" autoFocus nbInput fullWidth status=\"{{form?.email?.invalid && (form?.email?.dirty || form?.email?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                <div *ngIf=\"form?.email?.invalid && (form?.email?.dirty || form?.email?.touched)\" class=\"error\">\n                  <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.required\">Please enter email address</small>\n                  <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.email\">Please enter valid email address</small>\n              </div>\n              </div>            \n              <!-- Password input -->\n              <div class=\"form-outline mb-4\">\n                <input type=\"password\" placeholder=\"Password\" formControlName=\"password\" nbInput fullWidth status=\"{{form?.password?.invalid && (form?.password?.dirty || form?.password?.touched) ? 'danger' : ''}}\" id=\"form1Example2\" class=\"form-control\" />\n                <div *ngIf=\"form?.password?.invalid && (form?.password?.dirty || form?.password?.touched)\" class=\"error\">\n                    <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.required\">Please enter password</small>\n                </div>\n              </div>            \n              <!-- 2 column grid layout for inline styling -->\n              <div class=\"row mb-4\">\n                <div class=\"col d-flex justify-content-center\">\n                </div>            \n                <div class=\"col\">\n                  <!-- Simple link -->\n                  <a routerLink=\"/auth/forgot-password\">Forgot password?</a>\n                </div>\n              </div>            \n              <!-- Submit button -->\n              <button type=\"submit\" [disabled]=\"loginForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Sign in</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToasterService } from '../../services/toaster/toaster.service';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { Authenticate as AuthenticateModel } from '../../models/authenticate.model';\nimport {isEmpty} from \"lodash\";\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public submitted = false;\n  public isErrors = false;\n  public errMessage = '';\n  public isLoggedIn!: Observable<AuthenticateModel>; \n  public loginForm!: FormGroup;\n\n  constructor(    \n    private formBuilder: FormBuilder,\n    private toasterService: ToasterService,\n    private authenticateService: AuthenticateService,\n    private router: Router,\n    \n  ) { \n      if (this.authenticateService.isLoggedIn && !isEmpty(this.authenticateService.currentUserValue)) { \n        this.router.navigate(['/pages/dashboard']);\n      }\n   }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get form() { return this.loginForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      this.submitted = false;\n        return;\n    }    \n    this.authenticateService.login(this.loginForm.value).subscribe({\n      next: (data : any) => {\n        if(data && data.responseCode === 1){\n          this.loginForm.reset();\n          this.router.navigate(['/pages/dashboard']);\n        } else if(data && data.responseCode === 0){\n          this.toasterService.showToast('slash-outline','danger', data.message);\n        }else{\n          this.toasterService.showToast('slash-outline','danger', 'An error occured ! Please try again');\n        }\n      },\n      error: (err) => {     \n        this.errMessage = err?.message ? err?.message : err?.error?.message;\n        this.toasterService.showToast('slash-outline','danger', this.errMessage);\n      },\n      complete: () => {}\n    });\n    this.submitted = false;    \n  }\n\n}\n","<section>\n    <div class=\"container\">\n      <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n          <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n            <div class=\"card-body p-5 text-center\">  \n              <h3 class=\"mb-4\">Forgot Password!</h3>\n              <p>Enter your email address below and we'll send you a link to reset your password!</p>\n              <form [formGroup]=\"forgotForm\" (ngSubmit)=\"onSubmit()\">\n                <p *ngIf=\"isErrors\" class=\"error\">{{ errMessage }}</p>\n                <!-- Email input -->\n                <div class=\"form-outline mb-4\">\n                    <input type=\"email\" placeholder=\"Email address\" formControlName=\"email\" autoFocus nbInput fullWidth status=\"{{form?.email?.invalid && (form?.email?.dirty || form?.email?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                    <div *ngIf=\"form?.email?.invalid && (form?.email?.dirty || form?.email?.touched)\" class=\"error\">\n                        <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.required\">Please enter email address</small>\n                        <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.email\">Please enter valid email address</small>\n                    </div>\n                </div>           \n                <!-- Submit button -->\n                <button type=\"submit\" [disabled]=\"forgotForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Submit</button>\n                <hr />\n                <p>Already have password, <a routerLink=\"/auth/login\"> Sign In</a> here.</p>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { successAlert, errorAlert } from '../../helpers/sweetalert';\n\n@Component({\n  selector: 'ngx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  public forgotForm!: FormGroup;\n  public submitted = false;\n  public isErrors = false;\n  public errMessage = '';\n\n  constructor(private formBuilder: FormBuilder,\n    private authenticateService: AuthenticateService) { }\n\n  ngOnInit(): void {\n    this.forgotForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get form() { return this.forgotForm.controls; }\n\n  onSubmit = async() => {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.forgotForm.invalid) {\n      this.submitted = false;\n        return;\n    }\n    try {\n      const data = await this.authenticateService.forgotPassword(this.forgotForm.value);\n      if(data && data.responseCode === 1){\n        await successAlert('We have sent you a reset link to your registered email.');\n      } else if(data && data.responseCode === 0){\n        await errorAlert(data.message);\n      }else{\n        await errorAlert('Something went wrong ! Please try again');\n      }\n    } catch (err) {\n      await errorAlert(err?.error?.message);\n    }  \n    this.forgotForm.reset();\n    this.submitted = false; \n  }\n\n}\n","<section>\n    <div class=\"container\">\n      <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n          <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n            <div class=\"card-body p-5 text-center\">  \n                <h3 class=\"mb-4\">Reset Your Password</h3>                \n                <form *ngIf=\"!linkExpired && !success\" class=\"user\" [formGroup]=\"resetForm\" (ngSubmit)=\"onSubmit()\">\n                    <p>Please enter your new credentials</p>\n                    <!-- Email input -->\n                    <div class=\"form-outline mb-4\">\n                        <input type=\"password\" placeholder=\"Enter your password\" formControlName=\"password\" autoFocus nbInput fullWidth status=\"{{form?.password?.invalid && (form?.password?.dirty || form?.password?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                        <div *ngIf=\"form?.password?.invalid && (form?.password?.dirty || form?.password?.touched)\" class=\"error\">\n                            <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.required\">Please enter password</small>\n                            <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.pattern\">Password must be min 8 chars including one uppercase, one special character and alphanumeric</small>\n                        </div>\n                    </div>           \n                    <div class=\"form-outline mb-4\">\n                        <input type=\"password\" class=\"form-control\" formControlName=\"confirm_password\" placeholder=\"Confirm your password\" autoFocus nbInput fullWidth status=\"{{form?.confirm_password?.invalid && (form?.confirm_password?.dirty || form?.confirm_password?.touched) ? 'danger' : ''}}\">\n                        <div *ngIf=\"form.confirm_password?.invalid && (form.confirm_password?.dirty || form.confirm_password?.touched)\" class=\"error\">\n                            <small class=\"form-control-feedback\" *ngIf=\"form.confirm_password?.errors?.required\">Please confirm password</small>\n                            <small class=\"form-control-feedback\" *ngIf=\"form.confirm_password?.errors?.confirmedValidator\">Passwords doesn't match</small>\n                        </div>\n                    </div>           \n                    <!-- Submit button -->\n                    <button type=\"submit\" [disabled]=\"resetForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Submit</button>\n                </form>\n                <div *ngIf=\"success && !linkExpired\">\n                    <p>Your password has reset successfully !</p>\n                </div>\n                <div *ngIf=\"linkExpired && !success\">\n                    <p>This link has expired, please request new link to reset your password</p>\n                </div>\n                <hr />\n                <p>Already have password, <a routerLink=\"/auth/login\"> Sign In</a> here.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: AuthComponent,\n  children: [\n    {\n      path: 'login',\n      component: LoginComponent,\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordComponent,\n    },\n    {\n      path: 'reset-password',\n      component: ResetPasswordComponent,\n    },\n    {\n      path: '**',\n      component: NotFoundComponent,\n    },    \n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AbstractControlOptions, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { Authenticate as AuthenticateModel } from '../../models/authenticate.model';\nimport { ConfirmedValidator } from '../../helpers/confirmed.validator';\nimport { passwordRegx } from '../../helpers/regExp';\nimport { errorAlert } from '../../helpers/sweetalert';\nimport jwt_decode from 'jwt-decode';\nimport {isEmpty} from \"lodash\";\n\n@Component({\n  selector: 'ngx-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetForm!: FormGroup;\n  submitted = false;\n  linkExpired = false;\n  success = false;\n  isLoggedIn!: Observable<AuthenticateModel>; \n  token = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authenticateService: AuthenticateService,\n    private router: Router,\n  ) { \n      if (this.authenticateService.isLoggedIn && !isEmpty(this.authenticateService.currentUserValue)) {    \n        this.router.navigate(['/auth/login']);\n      }\n   }\n\n  ngOnInit(): void {\n    const urlParams = new URLSearchParams(window.location.search);\n    if(urlParams.get('token')){\n      this.token = urlParams.get('token')!;\n      const decoded: any = jwt_decode(this.token);\n      const tokenDetails = decoded.data;\n      console.log('tokenDetails', tokenDetails);\n      const currentTime = new Date().getTime();\n      console.log('currentTime', currentTime)\n      if(!tokenDetails || (tokenDetails && tokenDetails.expiry < currentTime)){\n        this.linkExpired = true;\n      }else{\n        this.checkResetTokenExpiry(this.token);\n      }\n    }else{\n      this.linkExpired = true;\n    }\n    console.log('linkExpired', this.linkExpired)\n    console.log('success', this.success)\n    this.resetForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.pattern(passwordRegx)]],\n      confirm_password: ['', [Validators.required]]\n    }, {\n      validator: [\n        ConfirmedValidator('password', 'confirm_password')\n      ]      \n    } as AbstractControlOptions\n    );\n  }\n\n  get form() { return this.resetForm.controls; }\n\n  checkResetTokenExpiry = async(token: string) => {\n    try {\n      const tokenResp = await this.authenticateService.validateResetToken(token);\n      if(tokenResp && tokenResp.responseCode === 1 && tokenResp.tokenExpiry === false){\n        this.linkExpired = false;\n      }else{\n        this.linkExpired = true;\n      }\n    } catch (error) {\n      return;\n    }    \n  }\n\n  onSubmit = async() => {\n    try {\n      this.success = false;\n      this.submitted = true;\n      // stop here if form is invalid\n      if (this.resetForm.invalid) {\n        this.submitted = false;\n          return;\n      }\n      this.resetForm.value.token = this.token;\n      const data = await this.authenticateService.resetPassword(this.resetForm.value);\n      if(data && data.responseCode === 1){\n        this.success = true;\n      } else if(data && data.responseCode === 0 && (data.errorCode === 'iw1003' || data.errorCode === 'iw1008')){\n        await errorAlert(data.message);\n        this.router.navigate(['/auth/forgot-password']);\n      }else if(data && data.responseCode === 0){\n        await errorAlert(data.message);\n      }else{\n        await errorAlert('Something went wrong ! Please try again');\n      }\n    } catch (error) {\n      await errorAlert(error);\n    }\n    this.resetForm.reset();\n    this.submitted = false;\n  }\n\n}","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-not-found',\n  styleUrls: ['./not-found.component.scss'],\n  templateUrl: './not-found.component.html',\n})\nexport class NotFoundComponent {\n\n  constructor(\n    private router: Router,\n  ) {}\n\n  goToLogin() {\n    this.router.navigate(['/auth/login']);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card>\n      <nb-card-body>\n        <div class=\"flex-centered col-xl-4 col-lg-6 col-md-8 col-sm-12\">\n          <h2 class=\"title\">404 Page Not Found</h2>\n          <small class=\"sub-title\">The page you were looking for doesn't exist</small>\n          <button (click)=\"goToLogin()\" type=\"button\" class=\"btn btn-primary btn-block\">\n            Take Me To Login\n          </button>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule  } from '@angular/forms';\n\nimport {\n  NbLayoutModule,\n  NbActionsModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbIconModule,\n  NbInputModule,\n  NbAlertModule\n} from '@nebular/theme';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { ThemeModule } from '../@theme/theme.module';\nimport { AuthRoutingModule } from './auth-routing.module';\n\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n    NotFoundComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ],\n  imports: [\n    SharedModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbInputModule,\n    NbAlertModule,\n    ThemeModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n"]}