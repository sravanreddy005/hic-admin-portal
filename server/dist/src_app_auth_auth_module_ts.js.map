{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.module.ts","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/not-found/not-found.component.ts","./src/app/auth/not-found/not-found.component.html","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html"],"sourcesContent":["import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: AuthComponent,\n  children: [\n    {\n      path: 'login',\n      component: LoginComponent,\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordComponent,\n    },\n    {\n      path: 'reset-password',\n      component: ResetPasswordComponent,\n    },\n    {\n      path: '**',\n      component: NotFoundComponent,\n    },    \n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngx-pages',\n  styleUrls: ['auth.component.scss'],\n  template: `<nb-layout windowMode>\n  <nb-layout-column>\n      <app-loader></app-loader>\n      <router-outlet></router-outlet>\n  </nb-layout-column>\n</nb-layout>`,\n})\nexport class AuthComponent {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule  } from '@angular/forms';\n\nimport {\n  NbLayoutModule,\n  NbActionsModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbIconModule,\n  NbInputModule,\n  NbAlertModule\n} from '@nebular/theme';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { ThemeModule } from '../@theme/theme.module';\nimport { AuthRoutingModule } from './auth-routing.module';\n\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n    NotFoundComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ],\n  imports: [\n    SharedModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbInputModule,\n    NbAlertModule,\n    ThemeModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { successAlert, errorAlert } from '../../helpers/sweetalert';\n\n@Component({\n  selector: 'ngx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  public forgotForm!: FormGroup;\n  public submitted = false;\n  public isErrors = false;\n  public errMessage = '';\n\n  constructor(private formBuilder: FormBuilder,\n    private authenticateService: AuthenticateService) { }\n\n  ngOnInit(): void {\n    this.forgotForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get form() { return this.forgotForm.controls; }\n\n  onSubmit = async() => {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.forgotForm.invalid) {\n      this.submitted = false;\n        return;\n    }\n    try {\n      const data = await this.authenticateService.forgotPassword(this.forgotForm.value);\n      if(data && data.responseCode === 1){\n        await successAlert('We have sent you a reset link to your registered email.');\n      } else if(data && data.responseCode === 0){\n        await errorAlert(data.message);\n      }else{\n        await errorAlert('Something went wrong ! Please try again');\n      }\n    } catch (err) {\n      await errorAlert(err?.error?.message);\n    }  \n    this.forgotForm.reset();\n    this.submitted = false; \n  }\n\n}\n","<section>\n    <div class=\"container\">\n      <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n          <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n            <div class=\"card-body p-5 text-center\">  \n              <h3 class=\"mb-4\">Forgot Password!</h3>\n              <p>Enter your email address below and we'll send you a link to reset your password!</p>\n              <form [formGroup]=\"forgotForm\" (ngSubmit)=\"onSubmit()\">\n                <p *ngIf=\"isErrors\" class=\"error\">{{ errMessage }}</p>\n                <!-- Email input -->\n                <div class=\"form-outline mb-4\">\n                    <input type=\"email\" placeholder=\"Email address\" formControlName=\"email\" autoFocus nbInput fullWidth status=\"{{form?.email?.invalid && (form?.email?.dirty || form?.email?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                    <div *ngIf=\"form?.email?.invalid && (form?.email?.dirty || form?.email?.touched)\" class=\"error\">\n                        <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.required\">Please enter email address</small>\n                        <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.email\">Please enter valid email address</small>\n                    </div>\n                </div>           \n                <!-- Submit button -->\n                <button type=\"submit\" [disabled]=\"forgotForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Submit</button>\n                <hr />\n                <p>Already have password, <a routerLink=\"/auth/login\"> Sign In</a> here.</p>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToasterService } from '../../services/toaster/toaster.service';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { Authenticate as AuthenticateModel } from '../../models/authenticate.model';\nimport {isEmpty} from \"lodash\";\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public submitted = false;\n  public isErrors = false;\n  public errMessage = '';\n  public isLoggedIn!: Observable<AuthenticateModel>; \n  public loginForm!: FormGroup;\n\n  constructor(    \n    private formBuilder: FormBuilder,\n    private toasterService: ToasterService,\n    private authenticateService: AuthenticateService,\n    private router: Router,\n    \n  ) { \n      if (this.authenticateService.isLoggedIn && !isEmpty(this.authenticateService.currentUserValue)) { \n        this.router.navigate(['/pages/dashboard']);\n      }\n   }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get form() { return this.loginForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      this.submitted = false;\n        return;\n    }    \n    this.authenticateService.login(this.loginForm.value).subscribe({\n      next: (data : any) => {\n        if(data && data.responseCode === 1){\n          this.loginForm.reset();\n          this.router.navigate(['/pages/dashboard']);\n        } else if(data && data.responseCode === 0){\n          this.toasterService.showToast('slash-outline','danger', data.message);\n        }else{\n          this.toasterService.showToast('slash-outline','danger', 'An error occured ! Please try again');\n        }\n      },\n      error: (err) => {     \n        this.errMessage = err?.message ? err?.message : err?.error?.message;\n        this.toasterService.showToast('slash-outline','danger', this.errMessage);\n      },\n      complete: () => {}\n    });\n    this.submitted = false;    \n  }\n\n}\n","<section>\n  <div class=\"container\">\n    <div class=\"row d-flex justify-content-center align-items-center h-100\">\n      <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n          <div class=\"card-body p-5 text-center\">\n            <h3 class=\"mb-5\">Sign in</h3>\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n              <!-- Email input -->\n              <div class=\"form-outline mb-4\">\n                <input type=\"email\" placeholder=\"Email address\" formControlName=\"email\" autoFocus nbInput fullWidth status=\"{{form?.email?.invalid && (form?.email?.dirty || form?.email?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                <div *ngIf=\"form?.email?.invalid && (form?.email?.dirty || form?.email?.touched)\" class=\"error\">\n                  <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.required\">Please enter email address</small>\n                  <small class=\"form-control-feedback\" *ngIf=\"form?.email?.errors?.email\">Please enter valid email address</small>\n              </div>\n              </div>            \n              <!-- Password input -->\n              <div class=\"form-outline mb-4\">\n                <input type=\"password\" placeholder=\"Password\" formControlName=\"password\" nbInput fullWidth status=\"{{form?.password?.invalid && (form?.password?.dirty || form?.password?.touched) ? 'danger' : ''}}\" id=\"form1Example2\" class=\"form-control\" />\n                <div *ngIf=\"form?.password?.invalid && (form?.password?.dirty || form?.password?.touched)\" class=\"error\">\n                    <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.required\">Please enter password</small>\n                </div>\n              </div>            \n              <!-- 2 column grid layout for inline styling -->\n              <div class=\"row mb-4\">\n                <div class=\"col d-flex justify-content-center\">\n                </div>            \n                <div class=\"col\">\n                  <!-- Simple link -->\n                  <a routerLink=\"/auth/forgot-password\">Forgot password?</a>\n                </div>\n              </div>            \n              <!-- Submit button -->\n              <button type=\"submit\" [disabled]=\"loginForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Sign in</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-not-found',\n  styleUrls: ['./not-found.component.scss'],\n  templateUrl: './not-found.component.html',\n})\nexport class NotFoundComponent {\n\n  constructor(\n    private router: Router,\n  ) {}\n\n  goToLogin() {\n    this.router.navigate(['/auth/login']);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card>\n      <nb-card-body>\n        <div class=\"flex-centered col-xl-4 col-lg-6 col-md-8 col-sm-12\">\n          <h2 class=\"title\">404 Page Not Found</h2>\n          <small class=\"sub-title\">The page you were looking for doesn't exist</small>\n          <button (click)=\"goToLogin()\" type=\"button\" class=\"btn btn-primary btn-block\">\n            Take Me To Login\n          </button>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AbstractControlOptions, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticateService } from '../../services/authentication/authenticate.service';\nimport { Authenticate as AuthenticateModel } from '../../models/authenticate.model';\nimport { ConfirmedValidator } from '../../helpers/confirmed.validator';\nimport { passwordRegx } from '../../helpers/regExp';\nimport { errorAlert } from '../../helpers/sweetalert';\nimport jwt_decode from 'jwt-decode';\nimport {isEmpty} from \"lodash\";\n\n@Component({\n  selector: 'ngx-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetForm!: FormGroup;\n  submitted = false;\n  linkExpired = false;\n  success = false;\n  isLoggedIn!: Observable<AuthenticateModel>; \n  token = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authenticateService: AuthenticateService,\n    private router: Router,\n  ) { \n      if (this.authenticateService.isLoggedIn && !isEmpty(this.authenticateService.currentUserValue)) {    \n        this.router.navigate(['/auth/login']);\n      }\n   }\n\n  ngOnInit(): void {\n    const urlParams = new URLSearchParams(window.location.search);\n    if(urlParams.get('token')){\n      this.token = urlParams.get('token')!;\n      const decoded: any = jwt_decode(this.token);\n      const tokenDetails = decoded.data;\n      const currentTime = new Date().getTime();\n      if(!tokenDetails || (tokenDetails && tokenDetails.expiry < currentTime)){\n        this.linkExpired = true;\n      }else{\n        this.checkResetTokenExpiry(this.token);\n      }\n    }else{\n      this.linkExpired = true;\n    }\n    this.resetForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.pattern(passwordRegx)]],\n      confirm_password: ['', [Validators.required]]\n    }, {\n      validator: [\n        ConfirmedValidator('password', 'confirm_password')\n      ]      \n    } as AbstractControlOptions\n    );\n  }\n\n  get form() { return this.resetForm.controls; }\n\n  checkResetTokenExpiry = async(token: string) => {\n    try {\n      const tokenResp = await this.authenticateService.validateResetToken(token);\n      if(tokenResp && tokenResp.responseCode === 1 && tokenResp.tokenExpiry === false){\n        this.linkExpired = false;\n      }else{\n        this.linkExpired = true;\n      }\n    } catch (error) {\n      return;\n    }    \n  }\n\n  onSubmit = async() => {\n    try {\n      this.success = false;\n      this.submitted = true;\n      // stop here if form is invalid\n      if (this.resetForm.invalid) {\n        this.submitted = false;\n          return;\n      }\n      this.resetForm.value.token = this.token;\n      const data = await this.authenticateService.resetPassword(this.resetForm.value);\n      if(data && data.responseCode === 1){\n        this.success = true;\n      } else if(data && data.responseCode === 0 && (data.errorCode === 'iw1003' || data.errorCode === 'iw1008')){\n        await errorAlert(data.message);\n        this.router.navigate(['/auth/forgot-password']);\n      }else if(data && data.responseCode === 0){\n        await errorAlert(data.message);\n      }else{\n        await errorAlert('Something went wrong ! Please try again');\n      }\n    } catch (error) {\n      await errorAlert(error);\n    }\n    this.resetForm.reset();\n    this.submitted = false;\n  }\n\n}","<section>\n    <div class=\"container\">\n      <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n          <div class=\"card shadow-2-strong\" style=\"border-radius: 1rem;\">\n            <div class=\"card-body p-5 text-center\">  \n                <h3 class=\"mb-4\">Reset Your Password</h3>                \n                <form *ngIf=\"!linkExpired && !success\" class=\"user\" [formGroup]=\"resetForm\" (ngSubmit)=\"onSubmit()\">\n                    <p>Please enter your new credentials</p>\n                    <!-- Email input -->\n                    <div class=\"form-outline mb-4\">\n                        <input type=\"password\" placeholder=\"Enter your password\" formControlName=\"password\" autoFocus nbInput fullWidth status=\"{{form?.password?.invalid && (form?.password?.dirty || form?.password?.touched) ? 'danger' : ''}}\" id=\"form1Example1\" class=\"form-control\" />\n                        <div *ngIf=\"form?.password?.invalid && (form?.password?.dirty || form?.password?.touched)\" class=\"error\">\n                            <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.required\">Please enter password</small>\n                            <small class=\"form-control-feedback\" *ngIf=\"form?.password?.errors?.pattern\">Password must be min 8 chars including one uppercase, one special character and alphanumeric</small>\n                        </div>\n                    </div>           \n                    <div class=\"form-outline mb-4\">\n                        <input type=\"password\" class=\"form-control\" formControlName=\"confirm_password\" placeholder=\"Confirm your password\" autoFocus nbInput fullWidth status=\"{{form?.confirm_password?.invalid && (form?.confirm_password?.dirty || form?.confirm_password?.touched) ? 'danger' : ''}}\">\n                        <div *ngIf=\"form.confirm_password?.invalid && (form.confirm_password?.dirty || form.confirm_password?.touched)\" class=\"error\">\n                            <small class=\"form-control-feedback\" *ngIf=\"form.confirm_password?.errors?.required\">Please confirm password</small>\n                            <small class=\"form-control-feedback\" *ngIf=\"form.confirm_password?.errors?.confirmedValidator\">Passwords doesn't match</small>\n                        </div>\n                    </div>           \n                    <!-- Submit button -->\n                    <button type=\"submit\" [disabled]=\"resetForm?.invalid || submitted\" class=\"btn btn-primary btn-block\">Submit</button>\n                </form>\n                <div *ngIf=\"success && !linkExpired\">\n                    <p>Your password has reset successfully !</p>\n                </div>\n                <div *ngIf=\"linkExpired && !success\">\n                    <p>This link has expired, please request new link to reset your password</p>\n                </div>\n                <hr />\n                <p>Already have password, <a routerLink=\"/auth/login\"> Sign In</a> here.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>"],"names":[],"sourceRoot":"webpack:///"}